import React, { Component } from "react";
import { TouchableOpacity, View, Dimensions, Image, Modal, Alert } from "react-native";
import { connect } from "react-redux";
import BlankPage2 from "../blankPage2";
import DrawBar from "../DrawBar";
import { DrawerNavigator, NavigationActions } from "react-navigation";
import {send_timesheetItem, timesheet} from "../../actions/user"
import {
  Container,
  Header,
  Footer, FooterTab,
  Title,
  Content,
  Text,
  Button,
  Icon,
  Left,
  Body,
  Right, Item, Input
} from "native-base";
import ActionButton from 'react-native-action-button';
import { Grid, Row } from "react-native-easy-grid";
import CalendarStrip from "react-native-calendar-strip";
import { Calendar, CalendarList, Agenda } from 'react-native-calendars';
import CalendarPicker from 'react-native-calendar-picker';
import AnimatedModal from 'react-native-animated-modal'


import { setIndex } from "../../actions/list";
import { login } from "../../actions/user";
import { openDrawer } from "../../actions/drawer";
import styles from "./styles";
import moment from 'moment';
import Spinner from 'react-native-loading-spinner-overlay';

const deviceHeight = Dimensions.get('window').height;
const deviceWidth = Dimensions.get('window').width;

const personImage = require("../../../images/person.png");
const switchImage = require("../../../images/switch.png");
const carImage = require("../../../images/ic_delivery@3x.png");
const actionClientBtn = require("../../../images/btn_clients_radio@3x.png");
const actionQuoteBtn = require("../../../images/btn_quote_radio@3x.png");
const actionTaskBtn = require("../../../images/btn_task_radio@3x.png");
const scheduleTabIcon = require("../../../images/ic_chelude_1_active@3x.png");
const scheduleTabIcon_not = require("../../../images/ic_schedule_not_active@3x.png");
const timesheetTabIcon = require("../../../images/ic_timecheet_active@3x.png");
const timesheetTabIcon_not = require("../../../images/ic_time_not_active@3x.png");
const clientsTabIcon = require("../../../images/ic_clients_active@3x.png");
const clientsTabIcon_not = require("../../../images/ic_clients_not_active@3x.png");
const checkAgainBtn = require("../../../images/btn_check_again@3x.png");
const timerIcon = require("../../../images/ic_time_2@3x.png");
const clockinBtn = require("../../../images/btn_clock_in@3x.png");
const clockOutBtn = require("../../../images/clickOut.png");
const clockinBtn_not = require("../../../images/btn_clock_in@3x_not.png");
const searchBtn = require("../../../images/btn_search@3x.png");
const settingIcon = require("../../../images/ic_settings@3x.png");
const calendarIcon = require("../../../images/ic_calendar@3x.png");
const arrowIcon = require("../../../images/ic_arrow@3x.png");

class Home extends Component {
  static navigationOptions = {
    header: null
  };
  static propTypes = {
    name: React.PropTypes.string,
    setIndex: React.PropTypes.func,
    list: React.PropTypes.arrayOf(React.PropTypes.string),
    openDrawer: React.PropTypes.func
  };

  constructor(props) {
    super(props);
    this.state = {
      visible: false,
      is_calendar:true,
      is_schedule: 1,
      is_timesheet: 0,
      is_clients: 0,
      is_clickInButton:true,
      is_pressed_clickInButton:false,
      modalVisible: false,
      modal_switch_Visible: false,
      selectedStartDate: null,
      isModalVisible: false,
      todayDate: moment(new Date()).format("YYYY-MM-DD"),
      todayTime: moment(new Date()).format("HH:mm"),
      timesheetItems_array: [
        {startTime: '05:00', endTime:'05:30', duration:'0h 30min'}
      ]
    };
    this.onDateChange = this.onDateChange.bind(this);
    this.DoSelectItem=this.DoSelectItem.bind(this)
  }

  componentWillMount() {
    {this.api_timesheet(moment(new Date()).format("YYYY-MM-DD"))}
  }
  
  componentDidMount() {
  }

  api_timesheet(date) {
    console.log('====', this.props.login_data.token)

    this.setState({visible:true})
    
    var temp="http://192.168.6.1/api/v1/timesheet/getall/" + date

    fetch(temp, {
        method: 'GET',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Access-Token': this.props.login_data.token
        }
    })

    .then((response) => response.json())
    .then((responseData) => {
      if (responseData.success == true) {
        this.setState({visible:false})
        this.props.timesheet(responseData)

        // this.props.navigation.navigate("Home")
      } else {
        var self=this
        self.setState({visible:false})

        setTimeout(function(){
          Alert.alert(responseData.errorMessage)
        }, 500);            

      }
    })
  }

  showModal() {
    this.setState({ isModalVisible: true })
  }
  hideModal() {
    this.setState({ isModalVisible: false })
  }

  

  onDateChange(date) {
    this.setState({
      selectedStartDate: date,
    });
  }

  newPage(index) {
    this.props.setIndex(index);
    Actions.blankPage();
  }

  setModalVisible(visible) {
      this.setState({modalVisible: visible});
  }

  showSwitchModalVisible(visible) {
      this.setState({modal_switch_Visible: visible});
  }

  clickCalendar() {
    if (this.state.is_calendar == true) {
      this.setState({is_calendar:true})
    } else {
      this.setState({is_calendar:true})
    }
  }

  select_schedule() {
    if (this.state.is_schedule == 0) {
      this.setState({is_schedule:1})
      this.setState({is_timesheet:0})
      this.setState({is_clients:0})
    }
  }
  select_timesheet() {
    if (this.state.is_timesheet == 0) {
      this.setState({is_schedule:0})
      this.setState({is_timesheet:1})
      this.setState({is_clients:0})
    }
  }
  select_clients() {
    if (this.state.is_clients == 0) {
      this.setState({is_schedule:0})
      this.setState({is_timesheet:0})
      this.setState({is_clients:1})
    }
  }

  selectDate_header(day) {
    var selectedDay=moment(day.toString()).format("YYYY-MM-DD")
    var currentDay=moment(new Date()).format("YYYY-MM-DD")

    if (selectedDay==currentDay) {
      this.setState({is_clickInButton:true})
    } else {
      this.setState({is_clickInButton:false})
    }

    {this.api_timesheet(selectedDay)}
  }

  showCalendar() {
    if (this.state.is_calendar == true) {
      return (
        <CalendarStrip 
          style={{width:deviceWidth, height:deviceHeight/8, backgroundColor:'#4f70ca', marginTop:-1}} 
          calendarAnimation={{type: 'sequence', duration: 100}}
          daySelectionAnimation={{type: 'background', duration: 200, highlightColor:'rgba(256,256,256,1)'}}
          calendarHeaderStyle={{color: 'white'}}
          dateNumberStyle={{color: 'white'}}
          dateNameStyle={{color: 'white'}}
          onDateSelected = {(day) => this.selectDate_header(day)}
        />        
      );
    } else {
      null
    }
  }

  showHeader() {
    if (this.state.is_calendar == false || this.state.is_schedule == 1) {
      return (
        <View style={{backgroundColor:'#f3f3f3', width:deviceWidth, height:deviceHeight/13, flexDirection:'row', alignItems:'center', justifyContent: 'space-between', borderBottomColor:'#757c85', borderBottomWidth:1}}>
          <View style={{flexDirection:'row', alignItems:'center'}}>
            <Image source={personImage} style={styles.personImageStyle} />
            <Text style={{color:'#757c85', fontSize:15, fontWeight:'600'}}>My Schedule</Text>
          </View>
          <TouchableOpacity style={{flexDirection:'row', alignItems:'center'}} onPress={() => this.showSwitchModalVisible(true)}>
            <Image source={switchImage} style={styles.switchStyle} />
            <Text style={{color:'#4f70ca', fontSize:15, fontWeight:'600', marginRight:deviceWidth/40}}>Switch</Text>
          </TouchableOpacity>
        </View>  
      );
    }
  }

  showItems() {
    if (this.state.is_calendar == false) {
      return (
        <View>
          <Text style={{fontWeight:'800', fontSize:14, marginTop:deviceHeight/60, marginLeft:deviceWidth/7, color:'#515151'}}>2 Items</Text>
          <View style={{marginTop:deviceWidth/30, marginLeft:deviceWidth/30}}>
            <View style={{flexDirection:'row', alignItems:'center'}}> 
              <View style={{marginRight:deviceWidth/18, backgroundColor:'#ffffff', width:deviceWidth/20, height:deviceWidth/20, borderRadius:deviceWidth/40, borderColor:'#888888', borderWidth:1.5}} />
              <Text style={{color:'#929292', fontWeight:'700', fontSize:15}}>8:30 AM - 12:30 PM</Text>
            </View>
            <View style={{flexDirection:'row', alignItems:'center'}}>
              <View style={{width:1, backgroundColor:'#888', height:deviceWidth/2.5, marginLeft:deviceWidth/40}} />
              <TouchableOpacity style={{borderColor:'#929292', borderWidth:1, borderRadius:5, flexDirection:'row', marginLeft:deviceWidth/13}} onPress={() => this.props.navigation.navigate("ItemDetailPage")}>
                <View style={{borderTopLeftRadius:5, borderBottomLeftRadius:5, backgroundColor:'#fff', width:deviceWidth/1.5}}>
                  <Text style={{marginTop:deviceWidth/20, marginLeft:deviceWidth/30, fontSize:16, fontWeight:'700', color:'#515151'}}>Bi-Weekly House Cleaning</Text>
                  <Text style={{marginTop:deviceWidth/30, marginLeft:deviceWidth/30, fontSize:16, fontWeight:'400', color:'#515151'}}>Carole Hughlett</Text>
                  <Text style={{marginTop:deviceWidth/120, marginLeft:deviceWidth/30, fontSize:16, fontWeight:'400', color:'#515151', marginBottom:deviceWidth/30}}>19 Norris Crescent</Text>
                </View>
                <View style={{borderTopRightRadius:5, borderBottomRightRadius:5, backgroundColor:'#dce2f4', width:deviceWidth/7, justifyContent:'center', alignItems:'center'}}>
                  <Image source={carImage} style={{width:deviceWidth/15, height:deviceWidth*129/159/15}} />
                </View>
              </TouchableOpacity>
            </View>
          </View>

          <View style={{marginLeft:deviceWidth/30}}>
            <View style={{flexDirection:'row', alignItems:'center'}}> 
              <View style={{marginRight:deviceWidth/18, backgroundColor:'#ffffff', width:deviceWidth/20, height:deviceWidth/20, borderRadius:deviceWidth/40, borderColor:'#888888', borderWidth:1.5}} />
              <Text style={{color:'#929292', fontWeight:'700', fontSize:15}}>8:30 AM - 12:30 PM</Text>
            </View>
            <View style={{flexDirection:'row', alignItems:'center'}}>
              <View style={{width:1, backgroundColor:'#888', height:deviceWidth/2.5, marginLeft:deviceWidth/40}} />
              <TouchableOpacity style={{borderColor:'#929292', borderWidth:1, borderRadius:5, flexDirection:'row', marginLeft:deviceWidth/13}} onPress={() => this.props.navigation.navigate("ItemDetailPage")}>
                <View style={{borderTopLeftRadius:5, borderBottomLeftRadius:5, backgroundColor:'#fff', width:deviceWidth/1.5}}>
                  <Text style={{marginTop:deviceWidth/20, marginLeft:deviceWidth/30, fontSize:16, fontWeight:'700', color:'#515151'}}>Bi-Weekly House Cleaning</Text>
                  <Text style={{marginTop:deviceWidth/30, marginLeft:deviceWidth/30, fontSize:16, fontWeight:'400', color:'#515151'}}>Carole Hughlett</Text>
                  <Text style={{marginTop:deviceWidth/120, marginLeft:deviceWidth/30, fontSize:16, fontWeight:'400', color:'#515151', marginBottom:deviceWidth/30}}>19 Norris Crescent</Text>
                </View>
                <View style={{borderTopRightRadius:5, borderBottomRightRadius:5, backgroundColor:'#dce2f4', width:deviceWidth/7, justifyContent:'center', alignItems:'center'}}>
                  <Image source={carImage} style={{width:deviceWidth/15, height:deviceWidth*129/159/15}} />
                </View>
              </TouchableOpacity>
            </View>
          </View>

          <View style={{marginLeft:deviceWidth/30}}>
            <View style={{flexDirection:'row', alignItems:'center'}}> 
              <View style={{marginRight:deviceWidth/18, backgroundColor:'#ffffff', width:deviceWidth/20, height:deviceWidth/20, borderRadius:deviceWidth/40, borderColor:'#888888', borderWidth:1.5}} />
              <Text style={{color:'#929292', fontWeight:'700', fontSize:15}}>8:30 AM - 12:30 PM</Text>
            </View>
            <View style={{flexDirection:'row', alignItems:'center'}}>
              <View style={{width:1, backgroundColor:'#888', height:deviceWidth/2.5, marginLeft:deviceWidth/40}} />
              <TouchableOpacity style={{borderColor:'#929292', borderWidth:1, borderRadius:5, flexDirection:'row', marginLeft:deviceWidth/13}} onPress={() => this.props.navigation.navigate("ItemDetailPage")}>
                <View style={{borderTopLeftRadius:5, borderBottomLeftRadius:5, backgroundColor:'#fff', width:deviceWidth/1.5}}>
                  <Text style={{marginTop:deviceWidth/20, marginLeft:deviceWidth/30, fontSize:16, fontWeight:'700', color:'#515151'}}>Bi-Weekly House Cleaning</Text>
                  <Text style={{marginTop:deviceWidth/30, marginLeft:deviceWidth/30, fontSize:16, fontWeight:'400', color:'#515151'}}>Carole Hughlett</Text>
                  <Text style={{marginTop:deviceWidth/120, marginLeft:deviceWidth/30, fontSize:16, fontWeight:'400', color:'#515151', marginBottom:deviceWidth/30}}>19 Norris Crescent</Text>
                </View>
                <View style={{borderTopRightRadius:5, borderBottomRightRadius:5, backgroundColor:'#dce2f4', width:deviceWidth/7, justifyContent:'center', alignItems:'center'}}>
                  <Image source={carImage} style={{width:deviceWidth/15, height:deviceWidth*129/159/15}} />
                </View>
              </TouchableOpacity>
            </View>
          </View>

          <View style={{marginLeft:deviceWidth/30}}>
            <View style={{flexDirection:'row', alignItems:'center'}}> 
              <View style={{marginRight:deviceWidth/18, backgroundColor:'#ffffff', width:deviceWidth/20, height:deviceWidth/20, borderRadius:deviceWidth/40, borderColor:'#888888', borderWidth:1.5}} />
              <Text style={{color:'#929292', fontWeight:'700', fontSize:15}}>8:30 AM - 12:30 PM</Text>
            </View>
            <View style={{flexDirection:'row', alignItems:'center'}}>
              <View style={{width:1, backgroundColor:'#888', height:deviceWidth/2.5, marginLeft:deviceWidth/40}} />
              <TouchableOpacity style={{borderColor:'#929292', borderWidth:1, borderRadius:5, flexDirection:'row', marginLeft:deviceWidth/13}} onPress={() => this.props.navigation.navigate("ItemDetailPage")}>
                <View style={{borderTopLeftRadius:5, borderBottomLeftRadius:5, backgroundColor:'#fff', width:deviceWidth/1.5}}>
                  <Text style={{marginTop:deviceWidth/20, marginLeft:deviceWidth/30, fontSize:16, fontWeight:'700', color:'#515151'}}>Bi-Weekly House Cleaning</Text>
                  <Text style={{marginTop:deviceWidth/30, marginLeft:deviceWidth/30, fontSize:16, fontWeight:'400', color:'#515151'}}>Carole Hughlett</Text>
                  <Text style={{marginTop:deviceWidth/120, marginLeft:deviceWidth/30, fontSize:16, fontWeight:'400', color:'#515151', marginBottom:deviceWidth/30}}>19 Norris Crescent</Text>
                </View>
                <View style={{borderTopRightRadius:5, borderBottomRightRadius:5, backgroundColor:'#dce2f4', width:deviceWidth/7, justifyContent:'center', alignItems:'center'}}>
                  <Image source={carImage} style={{width:deviceWidth/15, height:deviceWidth*129/159/15}} />
                </View>
              </TouchableOpacity>
            </View>
          </View>        
        </View>
      );
    } else {
      null
    }
  }

  DoSelectItem(_counterFromChild) {
    // this.setModalVisible(false)
    // this.setState({is_lineItem:true})

    var temp={date:this.props.timesheet_data.date, data:this.props.timesheet_data.array[_counterFromChild]}
    {this.props.send_timesheetItem(temp)}

    this.props.navigation.navigate("TimesheetDetailPage")
  }

  showSchedulePage() {
    if (this.state.is_schedule == 1) {
      return (
        <View style={{alignItems:'center', height:deviceHeight/1.5}}>
          <View style={{marginLeft:deviceWidth/20, marginRight:deviceWidth/20, marginTop:deviceHeight/7, borderRadius:15, borderWidth:1, borderColor:'#acacac', height:deviceHeight/3, width:deviceWidth*18/20, backgroundColor:'white', alignItems:'center'}}>
            <Text style={{fontSize:17, fontWeight:'700', color:'#515151', marginTop:deviceHeight/15}}>No scheduled visits or tasks</Text>
            <Text style={{fontSize:17, fontWeight:'normal', fontStyle: 'italic', color:'#515151', marginTop:deviceHeight/100, marginLeft:deviceWidth/10, marginRight:deviceWidth/10, marginBottom:deviceHeight/20, textAlign:'center'}}>Looks like you don't have anything to do today</Text>
            <TouchableOpacity style={{alignItems:'center'}}>
              <Image source={checkAgainBtn} style={{width:deviceWidth*2.5/4, height:deviceWidth*2.5*222/1374/4}} />
            </TouchableOpacity>
          </View>
          <View style={{width:deviceWidth/6, height:deviceWidth/6, borderRadius:deviceWidth/12, borderColor:'#acacac', borderWidth:1, alignItems:'center', justifyContent:'center', marginTop:-deviceHeight/3-deviceWidth/12, backgroundColor:'#f3f3f3'}}>
            <Image source={scheduleTabIcon} style={{width:deviceWidth/12, height:deviceWidth*129/135/12}} />
          </View>
        </View>
      );
    }
  }

  click_clockInButton() {
    var currentTime=moment(new Date()).format("HH:mm")

    if (this.state.is_pressed_clickInButton==true) {
      this.setState({is_pressed_clickInButton:false})

      var duration=0;
      var end_currentTime=moment(new Date()).format("HH:mm")
      let markers = [ ...this.state.timesheetItems_array ];
      var index=this.state.timesheetItems_array.length-1;
      var minuteDiff = moment(this.state.timesheetItems_array[index].startTime, "HH:mm").diff(moment(end_currentTime, "HH:mm"),'minutes');
      var hourDuration = Math.floor(Math.abs(minuteDiff)/60);
      var minuteDuration = Math.abs(minuteDiff % 60);
      var duration= hourDuration + 'h ' + minuteDuration + 'min'

      markers[index].endTime = end_currentTime;
      markers[index].duration = duration;
      this.setState({ timesheetItems_array: markers });

    } else {
      this.setState({is_pressed_clickInButton:true})

      var addItem={startTime: currentTime, endTime:'', duration:'0 min'}
  
      this.state.timesheetItems_array.push(addItem)
    }
  }

  showTimesheetPage() {
    if (this.state.is_timesheet == 1) {
      if (this.props.timesheet_data.array.length==0) {
        return (
          <View>
            <View>
              <Text style={{textAlign:'center', fontSize:18, fontWeight:'700', color:'#515151', marginTop:deviceHeight/50}}>Time tracked for today</Text>
              <View style={{flexDirection:'row', alignSelf:'center', marginTop:deviceHeight/50}}>
                <Text style={{fontSize:25, fontWeight:'700', color:'#515151'}}>{this.props.timesheet_data.total_duration}</Text>
              </View>
              <View style={{width:deviceWidth, height:1, backgroundColor:'#acacac', marginTop:deviceHeight/50}} />
            </View>
            <View style={{alignItems:'center'}} >
              <View style={{marginLeft:deviceWidth/20, marginRight:deviceWidth/20, marginTop:deviceHeight/10, borderRadius:15, borderWidth:1, borderColor:'#acacac', height:deviceHeight/3, width:deviceWidth*18/20, backgroundColor:'white', alignItems:'center'}}>
                <Text style={{fontSize:17, fontWeight:'700', color:'#515151', marginTop:deviceHeight/13}}>Let's get your day started!</Text>
                <Text style={{fontSize:17, fontWeight:'normal', fontStyle: 'italic', color:'#515151', margin:deviceHeight/50, marginLeft:deviceWidth/10, marginRight:deviceWidth/10, marginBottom:deviceHeight/20, textAlign:'center'}}>Clock in will start a timer for your day, you can Clock Out at any time by returning to this time sheet. Your timesheet will also house all of your visit timer entries for the day.</Text>
              </View>
              <View style={{width:deviceWidth/6, height:deviceWidth/6, borderRadius:deviceWidth/12, borderColor:'#acacac', borderWidth:1, alignItems:'center', justifyContent:'center', marginTop:-deviceHeight/3-deviceWidth/12, backgroundColor:'#f3f3f3'}}>
                <Image source={timerIcon} style={{width:deviceWidth/12, height:deviceWidth*144/132/12}} />
              </View>
            </View>

            {this.state.is_clickInButton==true ?
              <TouchableOpacity style={{alignItems:'center',  marginTop:deviceHeight/3, marginBottom:deviceHeight/30,}} onPress={() => this.click_clockInButton()}>
                {this.state.is_pressed_clickInButton==false ? <Image source={clockinBtn} style={{width:deviceWidth/2.5, height:deviceWidth*222/861/2.5}} /> : <Image source={clockOutBtn} style={{width:deviceWidth/2.5, height:deviceWidth*222/861/2.5}} />}
              </TouchableOpacity>
              :
              <View style={{alignItems:'center',  marginTop:deviceHeight/3, marginBottom:deviceHeight/30,}}>
                <Image source={clockinBtn_not} style={{width:deviceWidth/2.5, height:deviceWidth*222/861/2.5}} />
              </View>
            }

          </View>
        );
      } else {
          var i=-1;
          return this.props.timesheet_data.array.map((data) => {
            i++; 
            if (i==0) {
              return (
                  <View>
                    <Text style={{textAlign:'center', fontSize:18, fontWeight:'700', color:'#515151', marginTop:deviceHeight/50}}>Time tracked for today</Text>
                    <View style={{flexDirection:'row', alignSelf:'center', marginTop:deviceHeight/50}}>
                      <Text style={{fontSize:25, fontWeight:'700', color:'#515151'}}>{this.props.timesheet_data.total_duration}</Text>
                    </View>
                    <View style={{width:deviceWidth, height:1, backgroundColor:'#acacac', marginTop:deviceHeight/50}} />

                    <Child_Timesheet key={i} itemData={data} index={i} selectItem={this.DoSelectItem} />

                  </View>
              );
            } else if (this.props.timesheet_data.array.length-1 == i) {
              return (
                <View>

                  <Child_Timesheet key={i} itemData={data} index={i} selectItem={this.DoSelectItem} />

                  {this.state.is_clickInButton==true ?
                    <TouchableOpacity style={{alignItems:'center',  marginTop:deviceHeight/15, marginBottom:deviceHeight/30,}} onPress={() => this.click_clockInButton()}>
                      {this.state.is_pressed_clickInButton==false ? <Image source={clockinBtn} style={{width:deviceWidth/2.5, height:deviceWidth*222/861/2.5}} /> : <Image source={clockOutBtn} style={{width:deviceWidth/2.5, height:deviceWidth*222/861/2.5}} />}
                    </TouchableOpacity>
                    :
                    <View style={{alignItems:'center',  marginTop:deviceHeight/15, marginBottom:deviceHeight/30,}}>
                      <Image source={clockinBtn_not} style={{width:deviceWidth/2.5, height:deviceWidth*222/861/2.5}} />
                    </View>
                  }
                  
                </View>
              )
            } else {
               return (
                <Child_Timesheet key={i} itemData={data} index={i} selectItem={this.DoSelectItem} />
              )
            }
          })

      }
    }
  }

  showClientsPage() {
    if (this.state.is_clients == 1) {
      return (
        <View>
          <View>
            <View style={{flexDirection:'row', marginTop:deviceHeight/25, alignItems:'center'}}>
              <Item regular style={{marginLeft: deviceWidth/50, marginRight: deviceWidth/50, width:deviceWidth-deviceWidth*3/50-deviceWidth/6.5}}>
                  <Input placeholder='Search all clients' />
              </Item>
              <TouchableOpacity>
                <Image source={searchBtn} style={{width:deviceWidth/6.5, height:deviceWidth*306/360/6.5}} />
              </TouchableOpacity>
            </View>
            <View style={{alignSelf:'center', width:deviceWidth*47/50, marginTop:deviceHeight/20}}>
              <View style={{flexDirection:'row'}}>
                <Text style={{color:'#818181', fontSize:18, fontWeight:'400'}}>Scheduled clients for </Text>
                <Text style={{color:'#515151', fontSize:18, fontWeight:'700'}}>today</Text>
              </View>
            </View>
            <View style={{backgroundColor:'#888', height:2, alignSelf:'center', width:deviceWidth*47/50, marginTop:deviceHeight/50}} />
          </View>
          <View style={{alignItems:'center', height:deviceHeight/2}}>
            <View style={{marginLeft:deviceWidth/20, marginRight:deviceWidth/20, marginTop:deviceHeight/10, borderRadius:15, borderWidth:1, borderColor:'#acacac', height:deviceHeight/4, width:deviceWidth*18/20, backgroundColor:'white', alignItems:'center'}}>
              <Text style={{fontSize:17, fontWeight:'700', color:'#515151', marginTop:deviceHeight/13}}>No scheduled clients for today</Text>
              <Text style={{fontSize:17, fontWeight:'normal', fontStyle: 'italic', color:'#515151', margin:deviceHeight/50, marginLeft:deviceWidth/100, marginRight:deviceWidth/100, marginBottom:deviceHeight/20, textAlign:'center'}}>Use search to find clients by first, lastm or company name</Text>
            </View>
            <View style={{width:deviceWidth/6, height:deviceWidth/6, borderRadius:deviceWidth/12, borderColor:'#acacac', borderWidth:1, alignItems:'center', justifyContent:'center', marginTop:-deviceHeight/4-deviceWidth/12, backgroundColor:'#f3f3f3'}}>
              <Image source={clientsTabIcon} style={{width:deviceWidth/12, height:deviceWidth*135/153/12}} />
            </View>
          </View>
        </View>
      );
    }    
  }

  showTabbar() {
    if (this.state.is_calendar == true) {
      return (
        <View>
          <View style={{backgroundColor:'#acacac', width:deviceWidth, height:1}} />
          <View style={{backgroundColor:'#fff', width:deviceWidth, height:deviceHeight/13, flexDirection:'row'}}>
            <TouchableOpacity style={{flexDirection:'row', alignItems:'center', margin:deviceWidth/50}} onPress= {() => this.select_schedule()}>
              {this.state.is_schedule==1 ? <Image source={scheduleTabIcon} style={{width:deviceWidth/15, height:deviceWidth*129/135/15}} /> : <Image source={scheduleTabIcon_not} style={{width:deviceWidth/15, height:deviceWidth*135/141/15}} />}
              {this.state.is_schedule==1 ? <Text style={{marginLeft:deviceWidth/100, color:'#4f70ca', fontSize:15, fontWeight:'600'}}>Schedule</Text> : <Text style={{marginLeft:deviceWidth/100, color:'#515151', fontSize:15, fontWeight:'400'}}>Schedule</Text>}
            </TouchableOpacity>
            <TouchableOpacity style={{flexDirection:'row', alignItems:'center', margin:deviceWidth/50}} onPress= {() => this.select_timesheet()}>
              {this.state.is_timesheet==1 ? <Image source={timesheetTabIcon} style={{width:deviceWidth/15, height:deviceWidth/15}} /> : <Image source={timesheetTabIcon_not} style={{width:deviceWidth/15, height:deviceWidth/15}} />}
              {this.state.is_timesheet==1 ? <Text style={{marginLeft:deviceWidth/100, color:'#4f70ca', fontSize:15, fontWeight:'600'}}>Timesheet</Text> : <Text style={{marginLeft:deviceWidth/100, color:'#515151', fontSize:15, fontWeight:'400'}}>Timesheet</Text>}
            </TouchableOpacity>
            <TouchableOpacity style={{flexDirection:'row', alignItems:'center', margin:deviceWidth/50}} onPress= {() => this.select_clients()}>
              {this.state.is_clients==1 ? <Image source={clientsTabIcon} style={{width:deviceWidth/15, height:deviceWidth*135/153/15}} /> : <Image source={clientsTabIcon_not} style={{width:deviceWidth/15, height:deviceWidth*135/153/15}} />}
              {this.state.is_clients==1 ? <Text style={{marginLeft:deviceWidth/100, color:'#4f70ca', fontSize:15, fontWeight:'600'}}>Clients</Text> : <Text style={{marginLeft:deviceWidth/100, color:'#515151', fontSize:15, fontWeight:'400'}}>Clients</Text>}
            </TouchableOpacity>
          </View>
        </View>
      );
    } else {
      return (
        null
      );
    }
  }

  showAnimatedPlusButton() {
    if (this.state.is_calendar == true) {
      return (
        <ActionButton buttonColor="#4f70ca" offsetX={5} offsetY={20} bgColor='rgba(79, 112, 202, 0.6)'>
          <ActionButton.Item buttonColor='rgba(0,0,0,0)' title="Client" textStyle={{color:'white', fontSize:15, fontWeight:'700'}} textContainerStyle={{backgroundColor:'#3ead92'}} spaceBetween={5} onPress={() => this.props.navigation.navigate("NewClientPage")}>
            <Image source={actionClientBtn} style={{height:deviceWidth/7, width:deviceWidth/7}} />
          </ActionButton.Item>
          <ActionButton.Item buttonColor='rgba(0,0,0,0)' title="Quote" textStyle={{color:'white', fontSize:15, fontWeight:'700'}} textContainerStyle={{backgroundColor:'#b36096'}} spaceBetween={5} onPress={() => this.props.navigation.navigate("NewQuotePage")}>
          <Image source={actionQuoteBtn} style={{height:deviceWidth/7, width:deviceWidth/7}} />
          </ActionButton.Item>
          <ActionButton.Item buttonColor='rgba(0,0,0,0)' title="Job" textStyle={{color:'white', fontSize:15, fontWeight:'700'}} textContainerStyle={{backgroundColor:'#b36096'}} spaceBetween={5} onPress={() => this.props.navigation.navigate("NewJobPage")}>
          <Image source={actionTaskBtn} style={{height:deviceWidth/7, width:deviceWidth/7}} />
          </ActionButton.Item>
        </ActionButton>      
      );
    } else {
      null
    }
  }


  render() {
    const { selectedStartDate } = this.state;
    const startDate = selectedStartDate ? selectedStartDate.toString() : '';

    // let today = moment();
    // let day = today.clone();
    // let customDatesStyles = [];
    // while(day.add(1, 'day').isSame(today, 'month')) {
    //   customDatesStyles.push({
    //     date: day.clone(),
    //     // Random colors
    //     style: {backgroundColor: '#'+('#00000'+(Math.random()*(1<<24)|0).toString(16)).slice(-6)},
    //   });
    // }


    return (
      <Container style={styles.container}>
        <Header style={{backgroundColor: '#4f70ca'}}>
          <Left style={{ flex: 1,}}>
            <Button
              transparent
              light	
              onPress={() => DrawerNav.navigate("DrawerOpen")}
            >
              <Icon active name="menu" />
            </Button>
          </Left>
          <Body style={{ flex: 1,  justifyContent: 'center', alignItems: 'center' }}>
            <TouchableOpacity style={{flexDirection:'row', alignItems:'center'}} onPress={() => this.setModalVisible(true)}>
              <Text style={{color:'#ffffff', fontWeight:'700', fontSize:20, marginRight:10}}>{this.state.todayDate}</Text>
              <Image source={arrowIcon} style={{width:deviceWidth/25, height:deviceWidth*39/69/25, marginLeft:10}} />
            </TouchableOpacity>
          </Body>
          <Right style={{ flex: 1,}}>
            <Button
              transparent
              light
              onPress={() => this.clickCalendar()}
              >
                <Icon active name="calendar" />
            </Button>
          </Right>
       </Header>

       <Modal
          animationType={"fade"}
          transparent={true}
          visible={this.state.modalVisible}
          onRequestClose={() => this.setModalVisible(false)}
        >
          <View style={{width:deviceWidth, height:deviceHeight, backgroundColor:'rgba(0,0,0,0.7)', alignItems:'center'}}>
            <View style={{backgroundColor: '#FFF', marginTop: deviceHeight/7, width:deviceWidth/1.1, height:deviceHeight/1.5, borderWidth:2, borderColor:'#4f70ca', borderRadius:10}}>
              <View style={{marginTop:deviceHeight/30}}>
                <CalendarPicker
                  onDateChange={this.onDateChange}
                  selectedDayColor='#4f70ca'
                  width={deviceWidth/1.05}
                />
              </View>

              <View style={{marginTop:deviceHeight/10, flexDirection:'row', justifyContent:'space-between', marginBottom:deviceHeight/30}}>
                  <TouchableOpacity style={{marginLeft:deviceWidth/6}} onPress={() => this.setModalVisible(false)}>
                      <Text style={{fontSize:17, fontWeight:'600', color:'#4f70ca'}}>CANCEL</Text>
                  </TouchableOpacity>
                  <TouchableOpacity style={{marginRight:deviceWidth/6}} onPress={() => this.setModalVisible(false)}>
                      <Text style={{fontSize:17, fontWeight:'600', color:'#4f70ca'}}>OK</Text>
                  </TouchableOpacity>
              </View>
            </View>
          </View>
        </Modal>


        <Modal
          animationType={"slide"}
          transparent={false}
          visible={this.state.modal_switch_Visible}
          onRequestClose={() => this.showSwitchModalVisible(false)}
        >
          <View style={{width:deviceWidth, height:deviceHeight/10, backgroundColor:'#f3f3f3', justifyContent:'space-between', flexDirection:'row', alignItems:'center'}}>
            <Text style={{fontSize:18, fontWeight:'700', color:'#515151', marginLeft:deviceWidth/30}}>View team's schedule</Text>
            <TouchableOpacity style={{marginRight:deviceWidth/30}} onPress={() => this.showSwitchModalVisible(false)}>
                <Text style={{fontSize:17, fontWeight:'600', color:'#4f70ca'}}>CANCEL</Text>
            </TouchableOpacity>
          </View>
          <View style={{width:deviceWidth, margin:deviceWidth/30}}>
            <Item regular style={{width:deviceWidth*46.2/50, backgroundColor:'white', marginTop:deviceHeight/50}}>
                <Input placeholder='Search' />
            </Item>
          </View>
        </Modal>


        {this.showCalendar()}
        {this.showHeader()}

        <Content>

          <Spinner visible={this.state.visible} overlayColor='rgba(0,0,0,0.3)' />
          
          {this.showItems()}
          {this.showSchedulePage()}
          {this.showTimesheetPage()}
          {this.showClientsPage()}
        </Content>

        {this.showTabbar()}
        {this.showAnimatedPlusButton()}
          
      </Container>
    );
  }
}

function bindAction(dispatch) {
  return {
    setIndex: index => dispatch(setIndex(index)),
    openDrawer: () => dispatch(openDrawer()),
    send_timesheetItem: data => dispatch(send_timesheetItem(data)),
    timesheet: data => dispatch(timesheet(data))
  };
}
const mapStateToProps = state => ({
  name: state.user.name,
  list: state.list.list,
  login_data: state.user.login_data,
  timesheet_data: state.user.timesheet_data
});

const HomeSwagger = connect(mapStateToProps, bindAction)(Home);
const DrawNav = DrawerNavigator(
  {
    Home: { screen: HomeSwagger },
    BlankPage2: { screen: BlankPage2 }
  },
  {
    contentComponent: props => <DrawBar {...props} />
  }
);
const DrawerNav = null;
DrawNav.navigationOptions = ({ navigation }) => {
  DrawerNav = navigation;
  return {
    header: null
  };
};
export default DrawNav;


class Child_Timesheet extends Component {
  constructor(props) {
      super(props);
  }

  textFunction(i) {
    this.props.selectItem(i)
  }

  render() {
    return (
      <View style={{marginTop:deviceWidth/30, marginLeft:deviceWidth/30}}>
        <View style={{flexDirection:'row', alignItems:'center'}}> 
          <View style={{marginRight:deviceWidth/18, backgroundColor:'#ffffff', width:deviceWidth/20, height:deviceWidth/20, borderRadius:deviceWidth/40, borderColor:'#888888', borderWidth:1.5}} />
          <Text style={{color:'#929292', fontWeight:'700', fontSize:15}}>{this.props.itemData.startedTime}</Text>
        </View>
        <View style={{flexDirection:'row', alignItems:'center'}}>
          {this.props.itemData.address=="" ? <View style={{width:1, backgroundColor:'#888', height:deviceWidth/7, marginLeft:deviceWidth/40}} /> : <View style={{width:1, backgroundColor:'#888', height:deviceWidth/4, marginLeft:deviceWidth/40}} />}
          

          {this.props.itemData.endTime!='' ?
            <TouchableOpacity style={{borderColor:'#929292', borderWidth:1, borderRadius:5, flexDirection:'row', marginLeft:deviceWidth/13}} onPress={() => this.textFunction(this.props.index)}>
              <View style={{borderRadius:5, backgroundColor:'#fff', width:deviceWidth/1.25}}>
                {this.props.itemData.address!='' ? <Text style={{marginLeft:deviceWidth/30, marginTop:deviceWidth/30, fontSize:18, fontWeight:'600', color:'#515151'}}>{this.props.itemData.address}</Text> : null}
                <View style={{flexDirection:'row', alignItems:'center'}}>
                  <Text style={{margin:deviceWidth/30, fontSize:16, fontWeight:'400', color:'#515151'}}>{this.props.itemData.duration}</Text>
                  {this.props.itemData.note!=null ? <Text style={{fontSize:15, fontWeight:'400', color:'#818181'}}> - note</Text> : <Text style={{fontSize:15, fontWeight:'400', color:'#818181'}}></Text>}                  
                </View>
              </View>
            </TouchableOpacity>
            :
            <View style={{borderColor:'#929292', borderWidth:1, borderRadius:5, flexDirection:'row', marginLeft:deviceWidth/13}} onPress={() => this.textFunction(this.props.index)}>
              <View style={{borderRadius:5, backgroundColor:'#fff', width:deviceWidth/1.25}}>
                <Text style={{margin:deviceWidth/30, fontSize:16, fontWeight:'400', color:'#515151'}}>{this.props.itemData.duration}</Text>
              </View>
            </View>
          }
          
        </View>
        <View style={{flexDirection:'row', alignItems:'center'}}>
          {this.props.itemData.endTime=='' ? null
            :
            <View style={{marginRight:deviceWidth/20, backgroundColor:'#ffffff', width:deviceWidth/20, height:deviceWidth/20, borderRadius:deviceWidth/40, borderColor:'#888888', borderWidth:1.5}} />
          }
          <Text style={{color:'#929292', fontWeight:'700', fontSize:15}}>{this.props.itemData.endedTime}</Text>
        </View>
      </View>

    );
  }
} 
